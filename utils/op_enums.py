#!/usr/bin/env python3

from os import path
import re

THIS_FILE = path.realpath(__file__)
THIS_DIR = path.dirname(THIS_FILE)
OP_C = path.abspath(path.join(THIS_DIR, "../src/ops/op.c"))
OP_ENUM_H = path.abspath(path.join(THIS_DIR, "../src/ops/op_enum.h"))

HEADER_PRE = """// clang-format off

#ifndef _OP_ENUM_H_
#define _OP_ENUM_H_

// This file has been autogenerated by 'utils/op_enums.py'

"""
HEADER_POST = "#endif\n"


def find_ops(op_c):
    raw = re.findall("&op_[a-zA-Z0-9_]+", op_c)
    stripped = [s[4:] for s in raw]
    return stripped


def find_mods(op_c):
    raw = re.findall("&mod_[a-zA-Z0-9_]+", op_c)
    stripped = [s[5:] for s in raw]
    return stripped


def make_enum(name, prefix, entries):
    padding = max([len(s) for s in entries])
    output = ""
    output += "typedef enum {\n"
    for (i, e) in enumerate(entries):
        output += "    {}{} = {:3},\n".format(prefix, e.ljust(padding), i)
    output += "}} {};\n\n".format(name)
    return output


def main():
    print("reading:    {}".format(OP_C))
    print("generating: {}".format(OP_ENUM_H))
    with open(OP_C, "r") as f:
        op_c = f.read()
        ops = find_ops(op_c)
        mods = find_mods(op_c)
        op_enum = make_enum("tele_op_idx_t", "E_OP_", ops)
        mod_enum = make_enum("tele_mod_idx_t", "E_MOD_", mods)
        header = HEADER_PRE + op_enum + mod_enum + HEADER_POST
        with open(OP_ENUM_H, "w") as g:
            g.write(header)


if __name__ == '__main__':
    main()
